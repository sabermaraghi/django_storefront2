pipenv install djangorestframework

vim storefront/settings.py
INSTALLED_APPS = [
    ...
    'rest_framework',
    ...
]

vim store/views.py
from django.shortcuts import render
from django.http import HttpResponse

def product_list(request):
    return HttpResponse('ok')
#######################################    

vim store/urls.py
from django.urls import path
from . import views

# URLConf
urlpatterns = [
    path('products/', views.product_list)
#######################################
vim storefront/urls.py
    ...
    path('store/', include('store.urls')),
    ...
    
http://127.0.0.1:8000/store/products/
#######################################

vim store/views.py
from django.shortcuts import render
from django.http import HttpResponse
from rest_framework.decorators import api_view
from rest_framework.response import Response


@api_view()
def product_list(request):
    return Response('ok')
http://127.0.0.1:8000/store/products/

vim store/views.py
@api_view()
def product_detail(request, id):
    return Response(id);

vim store/urls.py
urlpatterns = [
    path('products/', views.product_list),
    path('products/<int:id>/', views.product_detail),
]
###########################################################
    # 8- Creating Serializers
    
vim store/serializers.py
from rest_framework import serializers

class ProductSerializer(serializers.Serializer):
    id = serializers.IntegerField()
    title = serializers.CharField(max_length=255)
    unit_price = serializers.DecimalField(max_digits=6, decimal_places=2)

###########################################################
    # 9- Serializing Objects
    
vim store/views.py 
from django.shortcuts import render
from django.http import HttpResponse
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import Product
from .serializers import ProductSerializer


@api_view()
def product_list(request):
    return Response('ok')

@api_view()
def product_detail(request, id):
    try:
        product = Product.objects.get(pk=id)
        serializer = ProductSerializer(product)
        return Response(serializer.data);
    except Product.DoesNotExist:
        return Response(status=404)

#######################################    
vim storefront/settings.py
REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False
}

#######################################
# another way to handle 404 error using get_object_or_404
vim store/views.py

from django.shortcuts import get_object_or_404
from django.http import HttpResponse
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from .models import Product
from .serializers import ProductSerializer


@api_view()
def product_list(request):
    queryset = Product.objects.all()
    serializer = ProductSerializer(queryset, many=True)
    return Response(serializer.data)
    
@api_view()
def product_detail(request, id):
    product = Product.objects.get(pk=id)
    serializer = ProductSerializer(product)
    return Response(serializer.data);

#######################################
vim store/serializers.py
from rest_framework import serializers
from store.models import Product
from decimal import Decimal

class ProductSerializer(serializers.Serializer):
    id = serializers.IntegerField()
    title = serializers.CharField(max_length=255)
    unit_price = serializers.DecimalField(max_digits=6, decimal_places=2)
    price_with_tax = serializers.SerializerMethodField(method_name='calculate_tax')

    def calculate_tax(self, product: Product):
        return product.unit_price * Decimal(1.1)

#######################################
    # 11- Serializing Relationships

vim store/serializers.py

from store.models import Collection
class ProductSerializer(serializers.Serializer):
    id = serializers.IntegerField()
    title = serializers.CharField(max_length=255)
    unit_price = serializers.DecimalField(max_digits=6, decimal_places=2)
    price_with_tax = serializers.SerializerMethodField(method_name='calculate_tax')
    #collection = serializers.PrimaryKeyRelatedField(
    #    queryset=Collection.objects.all()
    #)
    # or 
    #collection = serializers.StringRelatedField()
    # or
    #collection = CollectionSerializer()
    # or
 ##########   
    collection = serializers.HyperlinkedRelatedField(
        queryset=Collection.objects.all(),
        view_name='collection-detail'
    )
vim store/urls.py
urlpatterns = [
    ...
    path('collections/<int:pk>/', views.collection_detail, name='collection-detail'),
]
###########
vim store/views.py
@api_view()
def collection_detail(request, pk):
    return Response('ok')

################
vim store/views.py
@api_view()
def product_list(request):
    #queryset = Product.objects.all()
    queryset = Product.objects.select_related('collection').all()

class CollectionSerializer(serializers.Serializer):
    id = serializers.IntegerField()
    title = serializers.CharField(max_length=255)
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    













